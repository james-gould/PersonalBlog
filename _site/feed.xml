<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-17T10:36:24+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Practical .NET</title><author><name>James Gould</name><email>contact@jamesgould.dev</email></author><entry><title type="html">.NET Aspire Integration Testing Quick Start</title><link href="http://localhost:4000/posts/NET-Aspire-Integration-Testing-Troubleshooting/" rel="alternate" type="text/html" title=".NET Aspire Integration Testing Quick Start" /><published>2025-03-16T00:00:00+00:00</published><updated>2025-03-16T00:00:00+00:00</updated><id>http://localhost:4000/posts/NET-Aspire-Integration-Testing-Troubleshooting</id><content type="html" xml:base="http://localhost:4000/posts/NET-Aspire-Integration-Testing-Troubleshooting/"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>One of my main gripes with Microsoft is their documentation. If you’re starting something from scratch you’ll naturally Google around for it, find the docs and the example code looks super simple; then you get into the nitty gritty and suddenly you’re riding solo.</p>

<p>I’ve decided to fork the <a href="https://github.com/james-gould/azure-keyvault-emulator">Azure KeyVault Emulator</a>, which has been archived as of October 2024, because the functionality is really quite desirable. Aspire has allowed us to create local cloud environments at dev-time without needing to actually host or deploy resources, nor configure RBAC access (shudders). Key Vault is one of those services that <em>doesn’t</em> have support in Aspire (yet?) and you need to have a real instance of it hosted on Azure. With the emulator, and my future development/extensions, this won’t be required.</p>

<p>I wanted to create integration tests for the API to ensure it met the acceptance criteria for public consumption - naturally I googled “.NET Aspire Integration Testing” and <a href="https://learn.microsoft.com/en-us/dotnet/aspire/testing/write-your-first-test?pivots=xunit">this was the first link I saw</a>, from Microsoft themselves!</p>

<p>I use XUnit for all my testing purposes (mainly from habit) and .NET Aspire has a handy XUnit template you can just create a project from and now you have integration testing support!</p>

<p>Right? No. Why else would I be writing this?</p>

<p>If you’re weird like me you avoid odd number .NET versions. I went from <code class="language-plaintext highlighter-rouge">.NET Core 2.2</code> to <code class="language-plaintext highlighter-rouge">.NET 6</code>, now <code class="language-plaintext highlighter-rouge">.NET 8</code>. I’ll be upgrading to <code class="language-plaintext highlighter-rouge">.NET 10</code> when it comes out too.</p>

<p>This blog post covers setting up integration testing with <code class="language-plaintext highlighter-rouge">.NET 8</code>. Things may work differently in <code class="language-plaintext highlighter-rouge">.NET 9</code> - ie something that you need to explicitly delare in <code class="language-plaintext highlighter-rouge">.NET 8</code> may be implicit in future versions.</p>

<h1 id="setting-up-correctly">Setting up correctly</h1>

<p>We’ll be creating a new <code class="language-plaintext highlighter-rouge">.NET Aspire XUnit Project</code> from Visual Studio:</p>

<p><img src="https://i.imgur.com/gKXsc5l.png" alt=".NET Aspire Integration Testing Project using XUnit" /></p>

<p>Once you’ve got the naming done correctly and project settings configured from the wizard, the following item is <em>missing</em> from the template that causes it to entirely break:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- Include in your top level &lt;PropertyGroup&gt; --&gt;</span>
<span class="nt">&lt;PreserveCompilationContext&gt;</span>true<span class="nt">&lt;/PreserveCompilationContext&gt;</span>
</code></pre></div></div>

<p>There you go, I’ve just saved you 2 hours of Googling on a lovely Saturday afternoon.</p>

<p>Next step is to add a reference to your <code class="language-plaintext highlighter-rouge">AppHost</code> project in your new <code class="language-plaintext highlighter-rouge">XUnit</code> project:</p>

<p><img src="https://i.imgur.com/PWT3Iby.png" alt=".Net Aspire Integration Testing AppHost Setup" /></p>

<p>This will allow your new <code class="language-plaintext highlighter-rouge">IntegrationTesting</code> project to run the <code class="language-plaintext highlighter-rouge">AppHost</code> project, which in turn creates all the required resources, connection strings and so forth. Really bloody handy.</p>

<h1 id="sharedreference-projects">Shared/reference projects</h1>

<p>One of the nuances of <code class="language-plaintext highlighter-rouge">.NET Aspire</code> is any projects referenced are classed as <code class="language-plaintext highlighter-rouge">executables</code> - meaning if you need a <code class="language-plaintext highlighter-rouge">Model</code> from your API to create an integration test from it cannot exist in the same project as your API.</p>

<p>Annoying, but not a hill worth dying on. I migrated the models out of the <code class="language-plaintext highlighter-rouge">API</code> project and into a <code class="language-plaintext highlighter-rouge">Shared</code> project, and referenced it as such:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ProjectReference</span> <span class="na">Include=</span><span class="s">"..\AzureKeyVaultEmulator.Shared\AzureKeyVaultEmulator.Shared.csproj"</span> <span class="na">IsAspireProjectResource=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<p>The really key part here is the <code class="language-plaintext highlighter-rouge">IsAspireProjectResource="false"</code> which allows you to reference items from within that project like you would a normal project reference. For example:</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AzureKeyVaultEmulator.Shared.Constants</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AspireConstants</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">EmulatorServiceName</span> <span class="p">=</span> <span class="s">"keyVaultEmulatorApi"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">namespace</span> <span class="nn">AzureKeyVaultEmulator.IntegrationTests.SetupHelper</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">ExampleReference</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">referencedString</span> <span class="p">=</span> <span class="n">AspireConstants</span><span class="p">.</span><span class="n">EmulatorServiceName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I personally recommend encapsulating any names for applications into a <code class="language-plaintext highlighter-rouge">const string</code> like above because it allows for cleaner code and reusability.</p>

<p>…or I’m just lazy and can’t be bothered to update 3 strings when I make a change.</p>

<h1 id="create-your-testing-environment">Create your testing environment</h1>

<p>Now you’re finally ready to create your testing environment! Let’s get cracking.</p>

<p>First off we’re going to need a <code class="language-plaintext highlighter-rouge">Fixture</code>, which encapsulates the environment for your actual test cases. This fixture will make use of the reference to your <code class="language-plaintext highlighter-rouge">AppHost</code>, creating an instance of it per test class, and then using its’ exposed endpoints/services to execute tests.</p>

<p>You don’t <em>strictly</em> need to do this, but you really should. If you’re writing more than a single integration test then you’ll save a load of time writing/copying the same code per test case, and any faults that crop up can be fixed in a single area.</p>

<p>Again, reusability! It’s important - and this is why the MS documentation kind of sucks sometimes.</p>

<p>Create a basic, minimal <code class="language-plaintext highlighter-rouge">Fixture</code> inside of your <code class="language-plaintext highlighter-rouge">IntegrationTesting</code> project (ideally in a suitably named folder):</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">TestingFixture</span> <span class="p">:</span> <span class="n">IAsyncLifetime</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="n">DistributedApplication</span><span class="p">?</span> <span class="n">_app</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">ResourceNotificationService</span><span class="p">?</span> <span class="n">_notificationService</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">InitializeAsync</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">await</span> <span class="n">DistributedApplicationTestingBuilder</span><span class="p">.</span><span class="n">CreateAsync</span><span class="p">&lt;</span><span class="n">Projects</span><span class="p">.</span><span class="n">AzureKeyVaultEmulator_AppHost</span><span class="p">&gt;();</span>

        <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">ConfigureHttpClientDefaults</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="n">c</span><span class="p">.</span><span class="nf">AddStandardResilienceHandler</span><span class="p">();</span>
        <span class="p">});</span>

        <span class="n">_app</span> <span class="p">=</span> <span class="k">await</span> <span class="n">builder</span><span class="p">.</span><span class="nf">BuildAsync</span><span class="p">();</span>

        <span class="n">_notificationService</span> <span class="p">=</span> <span class="n">_app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">ResourceNotificationService</span><span class="p">&gt;();</span>

        <span class="k">await</span> <span class="n">_app</span><span class="p">.</span><span class="nf">StartAsync</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DisposeAsync</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_app</span> <span class="k">is</span> <span class="k">not</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">await</span> <span class="n">_app</span><span class="p">.</span><span class="nf">DisposeAsync</span><span class="p">().</span><span class="nf">ConfigureAwait</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Let’s go over the important bits here:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">InitialiseAsync()</code> creates our <code class="language-plaintext highlighter-rouge">DistrubutedApplication</code> - ie the <code class="language-plaintext highlighter-rouge">AppHost</code>. We want to keep a higher scoped reference to that for the future: <code class="language-plaintext highlighter-rouge">_app</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">ResourceNotificationService</code> allows us to <code class="language-plaintext highlighter-rouge">WaitAsync()</code> for resources that <code class="language-plaintext highlighter-rouge">.NET Aspire</code> is creating before trying to use them; essentially the testing version of <code class="language-plaintext highlighter-rouge">WaitFor(xxx)</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">DisposeAsync()</code> cleans up the <code class="language-plaintext highlighter-rouge">DistributedApplication</code> on a per-class basis. Without this you will have lingering resources/ports should your tests throw an <code class="language-plaintext highlighter-rouge">Exception</code> and bottom out.</li>
</ul>

<p>We’re trying to test an API, so we need a <code class="language-plaintext highlighter-rouge">HttpClient</code> which points to our <code class="language-plaintext highlighter-rouge">localhost:XXXX</code> resource.</p>

<p>Unless we hardcode the <code class="language-plaintext highlighter-rouge">port</code> we need to look this up. The Microsoft docs tell you to create these on a per-test basis, gah, which is not ideal.</p>

<p>Let’s create, and expose, a <code class="language-plaintext highlighter-rouge">HttpClient</code> from our <code class="language-plaintext highlighter-rouge">Fixture</code> by extending its’ functionality:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="n">HttpClient</span><span class="p">?</span> <span class="n">_testingClient</span><span class="p">;</span> <span class="c1">// Placed below _notificationService</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">HttpClient</span><span class="p">&gt;</span> <span class="nf">CreateHttpClient</span><span class="p">(</span><span class="kt">string</span> <span class="n">applicationName</span> <span class="p">=</span> <span class="n">AspireConstants</span><span class="p">.</span><span class="n">EmulatorServiceName</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_testingClient</span> <span class="k">is</span> <span class="k">not</span> <span class="k">null</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">_testingClient</span><span class="p">;</span>

    <span class="n">_testingClient</span> <span class="p">=</span> <span class="n">_app</span><span class="p">!.</span><span class="nf">CreateHttpClient</span><span class="p">(</span><span class="n">applicationName</span><span class="p">);</span>

    <span class="k">await</span> <span class="n">_notificationService</span><span class="p">!.</span><span class="nf">WaitForResourceAsync</span><span class="p">(</span><span class="n">applicationName</span><span class="p">,</span> <span class="n">KnownResourceStates</span><span class="p">.</span><span class="n">Running</span><span class="p">).</span><span class="nf">WaitAsync</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">30</span><span class="p">));</span>

    <span class="k">return</span> <span class="n">_testingClient</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We’re now using the <code class="language-plaintext highlighter-rouge">CreateHttpClient("MyApiProject")</code> method which under the hood uses <code class="language-plaintext highlighter-rouge">IHttpClientFactory</code> <a href="https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Testing/DistributedApplicationHostingTestingExtensions.cs#L23-L34">as you can see here</a>. No need to worry about hardcoding the IP and Port for your application, delegate the work to <code class="language-plaintext highlighter-rouge">.NET Aspire</code>.</p>

<p>Next we’re making use of our <code class="language-plaintext highlighter-rouge">ResourceNotificationService</code> to wait for the API to be alive. This is near-instant once the <code class="language-plaintext highlighter-rouge">AppHost</code> has launched but extremely useful if you have a slow start-up (such as waiting for a database server).</p>

<p>We’re also making use of your <code class="language-plaintext highlighter-rouge">AspireConstants.EmulatorServiceName</code> here to keep our code clean too! I will keep beating the reusability drum.</p>

<h1 id="create-your-integration-tests">Create your integration test(s)</h1>

<p>Okay, finally, we can start writing tests in a way that is easy to maintain.</p>

<p>First off create a new <code class="language-plaintext highlighter-rouge">TestClass</code> for a particular <code class="language-plaintext highlighter-rouge">Controller</code>, <code class="language-plaintext highlighter-rouge">Endpoint</code>, whatever you want to test:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">GetSecretTests</span><span class="p">(</span><span class="n">TestingFixture</span> <span class="n">fixture</span><span class="p">)</span> <span class="p">:</span> <span class="n">IClassFixture</span><span class="p">&lt;</span><span class="n">TestingFixture</span><span class="p">&gt;</span>
<span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">IClassFixture&lt;TestingFixture&gt;</code> tells our class that we’re a testing class specifically, and exposes the <code class="language-plaintext highlighter-rouge">TestingFixture</code> to it.</p>

<p>We’re using the new <a href="https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/primary-constructors">Primary Constructor</a> syntax - which my eyes/brain still haven’t gotten used to.</p>

<p>Now let’s add a test and call into our API:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">GetSecretsBlocksRequestWithoutBearerTokenTest</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">await</span> <span class="n">fixture</span><span class="p">.</span><span class="nf">CreateHttpClient</span><span class="p">();</span>

    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">GetAsync</span><span class="p">(</span><span class="s">"secrets/willfail"</span><span class="p">);</span>

    <span class="n">Assert</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">Unauthorized</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">StatusCode</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As you can see the <code class="language-plaintext highlighter-rouge">TestingFixture</code> allows us to create a bog-standard <code class="language-plaintext highlighter-rouge">HttpClient</code> which we can use to interact with our API - which has been hosted by <code class="language-plaintext highlighter-rouge">.NET Aspire</code>.</p>

<p>Remember the point I made about migrating API models to a <code class="language-plaintext highlighter-rouge">Shared</code> project earlier? If you need to go further into validating the response, ie checking a field has been set correctly, you can do so like you would consuming a 3rd party API:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">GetSecretsReturnsBackCorrectValueTest</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">await</span> <span class="n">fixture</span><span class="p">.</span><span class="nf">CreateHttpClient</span><span class="p">();</span>

    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">GetAsync</span><span class="p">(</span><span class="s">"secrets/myPassword"</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">secret</span> <span class="p">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="n">ReadFromJsonAsync</span><span class="p">&lt;</span><span class="n">SecretResponse</span><span class="p">&gt;();</span>

    <span class="n">Assert</span><span class="p">.</span><span class="nf">NotEqual</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">,</span> <span class="n">secret</span><span class="p">?.</span><span class="n">Value</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And that’s it! Now you have a fully reusable <code class="language-plaintext highlighter-rouge">Fixture</code> and a set up integration testing environment for your API, along with all resources required by your platform to operate.</p>

<h1 id="final-notes">Final notes</h1>

<p>If you’re using a versioned API and don’t want to repeat yourself endlessly (reusabili- okay I’ll stop) you can modify the <code class="language-plaintext highlighter-rouge">CreateHttpClient</code> method in your <code class="language-plaintext highlighter-rouge">Fixture</code> to do that for you. I’m using the following:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;PackageReference</span> <span class="na">Include=</span><span class="s">"Asp.Versioning.Http"</span> <span class="na">Version=</span><span class="s">"8.1.0"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;PackageReference</span> <span class="na">Include=</span><span class="s">"Asp.Versioning.Http.Client"</span> <span class="na">Version=</span><span class="s">"8.1.0"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>And implementing them like so:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="n">HttpClient</span><span class="p">?</span> <span class="n">_testingClient</span><span class="p">;</span>

<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">HttpClient</span><span class="p">&gt;</span> <span class="nf">CreateHttpClient</span><span class="p">(</span><span class="kt">double</span> <span class="n">version</span><span class="p">,</span> <span class="kt">string</span> <span class="n">applicationName</span> <span class="p">=</span> <span class="n">AspireConstants</span><span class="p">.</span><span class="n">EmulatorServiceName</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_testingClient</span> <span class="k">is</span> <span class="k">not</span> <span class="k">null</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">_testingClient</span><span class="p">;</span>

    <span class="kt">var</span> <span class="n">opt</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ApiVersionHandler</span><span class="p">(</span><span class="k">new</span> <span class="nf">QueryStringApiVersionWriter</span><span class="p">(),</span> <span class="k">new</span> <span class="nf">ApiVersion</span><span class="p">(</span><span class="n">version</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">InnerHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClientHandler</span><span class="p">()</span> <span class="c1">// Make sure you add this!</span>
    <span class="p">};</span>

    <span class="kt">var</span> <span class="n">endpoint</span> <span class="p">=</span> <span class="n">_app</span><span class="p">!.</span><span class="nf">GetEndpoint</span><span class="p">(</span><span class="n">applicationName</span><span class="p">);</span>

    <span class="n">_testingClient</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">(</span><span class="n">opt</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">BaseAddress</span> <span class="p">=</span> <span class="n">endpoint</span>
    <span class="p">};</span>

    <span class="k">await</span> <span class="n">_notificationService</span><span class="p">!.</span><span class="nf">WaitForResourceAsync</span><span class="p">(</span><span class="n">applicationName</span><span class="p">,</span> <span class="n">KnownResourceStates</span><span class="p">.</span><span class="n">Running</span><span class="p">).</span><span class="nf">WaitAsync</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">30</span><span class="p">));</span>

    <span class="k">return</span> <span class="n">_testingClient</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And then configure your tests to alter the API version like so:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Theory</span><span class="p">]</span>
<span class="p">[</span><span class="nf">InlineData</span><span class="p">(</span><span class="m">1.0</span><span class="p">)]</span>
<span class="p">[</span><span class="nf">InlineData</span><span class="p">(</span><span class="m">1.1</span><span class="p">)]</span>
<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">GetSecretsReturnsBackCorrectValueTest</span><span class="p">(</span><span class="kt">double</span> <span class="n">version</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">await</span> <span class="n">fixture</span><span class="p">.</span><span class="nf">CreateHttpClient</span><span class="p">(</span><span class="n">version</span><span class="p">);</span> <span class="c1">// Included here!</span>

    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">GetAsync</span><span class="p">(</span><span class="s">"secrets/myPassword"</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">secret</span> <span class="p">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="n">ReadFromJsonAsync</span><span class="p">&lt;</span><span class="n">SecretResponse</span><span class="p">&gt;();</span>

    <span class="n">Assert</span><span class="p">.</span><span class="nf">NotEqual</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">,</span> <span class="n">secret</span><span class="p">?.</span><span class="n">Value</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This implementation will append <code class="language-plaintext highlighter-rouge">api-version={version}</code> to the end ouf our request, where <code class="language-plaintext highlighter-rouge">version</code> is provided by <code class="language-plaintext highlighter-rouge">[InlineData]</code>.</p>

<p>You can alter where that version goes, I was going to link the documentation as a tongue-in-cheek joke but in classic Microsoft fashion this happened:</p>

<p><img src="https://i.imgur.com/0OeGTiM.png" alt="Documentation missing from MS" /></p>

<p>Honestly couldn’t make it up.</p>

<p>Thanks for reading!</p>]]></content><author><name>James Gould</name><email>contact@jamesgould.dev</email></author><category term=".NET 8" /><category term=".NET Aspire" /><category term="integration testing" /><category term="C#" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Fast Static Jekyll Blog Deployment with Azure CI/CD</title><link href="http://localhost:4000/posts/easy-azure-static-webapp-blog/" rel="alternate" type="text/html" title="Fast Static Jekyll Blog Deployment with Azure CI/CD" /><published>2022-02-04T00:00:00+00:00</published><updated>2022-02-04T00:00:00+00:00</updated><id>http://localhost:4000/posts/easy-azure-static-webapp-blog</id><content type="html" xml:base="http://localhost:4000/posts/easy-azure-static-webapp-blog/"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>A few days prior, when I set this blog up, I wanted to shortcut a lot of the legwork with setting up a proper CI/CD pipeline to build and release out to an Azure Static Web App.</p>

<p>If you’re a fan of horror stories feel free to read my <a href="https://jamesgould.dev/posts/sinning-via-azure-devops/">initial attempt here</a>.</p>

<p>Some future requirements have come up which meant that I not only needed a proper <em>build</em> pipeline, but also a fast one.</p>

<p>For those unaware, Azure Devops has a free tier which includes 1800 minutes of build time per month, refreshing on the 1st of the month.</p>

<p>I’ve now built a true, fairly fast CI/CD pipeline to build and release this blog out and I’d like to share my findings with you, dear reader.</p>

<p>In case you just want the <code class="language-plaintext highlighter-rouge">YAML</code> and nothing else, here it is:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

schedules:
- cron: "5 0 * * *"
  displayName: Daily release for scheduled posts
  branches:
    include: 
     - master
  always: true 

steps:
- task: UseRubyVersion@0
  inputs:
    versionSpec: '&gt;= 2.5'

- script: |
    gem install jekyll bundler --no-rdoc
    bundle install --retry=3 --jobs=4
  displayName: 'bundle install'

- task: CmdLine@2
  inputs:
    script: bundle exec jekyll build
    displayName: 'Jekyll Build'
    
- task: AzureStaticWebApp@0
  inputs:
      app_location: '/_site'
      api_location: 'api'
      output_location: '/_site'
      azure_static_web_apps_api_token: $(deployment_token)

</code></pre></div></div>

<h1 id="lets-break-it-down">Let’s break it down</h1>

<p>Let’s jump into the nitty-gritty of what this build config is doing, and why.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>schedules:
- cron: "5 0 * * *"
  displayName: Daily release for scheduled posts
  branches:
    include: 
     - master
  always: true 
</code></pre></div></div>

<p>This is an optional include that will build the blog on a schedule, with the cron being every day at 00:05am. This is so I can schedule posts into the <code class="language-plaintext highlighter-rouge">all_collections/_posts</code> directory and have them release on the date of the post.</p>

<p>If you don’t want to schedule a build and simply want to trigger the release when you publish a new post, delete this section.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>steps:
- task: UseRubyVersion@0
  inputs:
    versionSpec: '&gt;= 2.5'

- script: |
    gem install jekyll bundler --no-rdoc
    bundle install --retry=3 --jobs=4
  displayName: 'bundle install'
</code></pre></div></div>

<p>This is a 2 step part which has been the majority of the time sink I’ve experienced.</p>

<p>First we’re specifying which version of <code class="language-plaintext highlighter-rouge">Ruby</code> to use, as <a href="https://jekyllrb.com/docs/">Jekyll advises against using spec 3.0 or higher in their quickstart guide.</a></p>

<p>Next we’re pipelining two scripts to set the stage for our blog:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">gem install jekyll bundler --no-rdoc</code> which will allow the actual build script used by <code class="language-plaintext highlighter-rouge">Jekyll</code> to run correctly.</li>
  <li><code class="language-plaintext highlighter-rouge">bundle install --retry=3 --jobs=4</code> which will then install our dependencies etc, ready for compiling the blog markdown into HTML.</li>
</ul>

<p>Let’s take a deeper look into each.</p>

<h1 id="lightening-fast">Lightening fast?</h1>

<p><code class="language-plaintext highlighter-rouge">gem install jekyll bundler --no-rdoc</code> comprises of two parts, the command to run and the parameters.</p>

<p>The initital command <code class="language-plaintext highlighter-rouge">gem install jekyll bundler</code> typically takes around 2m30s to run on the Azure Free tier. Part of this, for whatever reason, is building documentation for the script which we, as “set-and-forget” pipeline runners, don’t care about. That’s where <code class="language-plaintext highlighter-rouge">--no-rdoc</code> comes in.</p>

<p>With this addition we skip the step where the documentation is created. This shaved around 30s off the total build time, saving our precious free minutes!</p>

<p><code class="language-plaintext highlighter-rouge">bundle install --retry=3 --jobs=4</code> is an important part of the process as building the Jekyll site requires the bundle to be installed. Some caching can be done here to mitigate further time, but I haven’t gotten to that yet.</p>

<p>The <code class="language-plaintext highlighter-rouge">--job=4</code> is the key part here. Without it, we run the process on a single core. By specifying <code class="language-plaintext highlighter-rouge">4</code> we’re able to run our command on 4 cores, shaving off a bunch of time. I didn’t really notice this before, but I took it out for a trial run and it added an extra couple of minutes to the build time.</p>

<h1 id="the-boring-stuff">The boring stuff</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- task: CmdLine@2
  inputs:
    script: bundle exec jekyll build
    displayName: 'Jekyll Build'
</code></pre></div></div>

<p>Now that we’ve gotten our ducks firmly in a row it’s time to build out <code class="language-plaintext highlighter-rouge">xxx.md</code> files into actual HTML. This is a simple command-line script which runs <code class="language-plaintext highlighter-rouge">bundle exec jekyll build</code>. Only takes about 1s, no point trying to optimise it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- task: AzureStaticWebApp@0
  inputs:
      app_location: '/_site'
      api_location: 'api'
      output_location: '/_site'
      azure_static_web_apps_api_token: $(deployment_token)
</code></pre></div></div>

<p>At this point we’ve done all the required steps and we’re ready to publish out to our Azure Static Web App. We have a <code class="language-plaintext highlighter-rouge">pipeline variable</code> set called <code class="language-plaintext highlighter-rouge">deployment_token</code> which you can grab from the configuration blade of your Static Web App (detailed explanation on the previous post linked above).</p>

<p>This step takes the ready <code class="language-plaintext highlighter-rouge">_site</code> directory and publishes it out.</p>

<h2 id="aaaaand-breathe">Aaaaand breathe.</h2>

<p>Cool, we’re all set. It’s running, total time is typically just over 3 minutes which means we can run a whole bunch of these each day at <code class="language-plaintext highlighter-rouge">00:05</code> without stressing.</p>]]></content><author><name>James Gould</name><email>contact@jamesgould.dev</email></author><category term="jekyll" /><category term="azure devops" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Publishing Static Web App Blog via Azure Devops</title><link href="http://localhost:4000/posts/sinning-via-azure-devops/" rel="alternate" type="text/html" title="Publishing Static Web App Blog via Azure Devops" /><published>2022-01-28T00:00:00+00:00</published><updated>2022-01-28T00:00:00+00:00</updated><id>http://localhost:4000/posts/sinning-via-azure-devops</id><content type="html" xml:base="http://localhost:4000/posts/sinning-via-azure-devops/"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>When deciding to build a blog there were a few options:</p>

<ul>
  <li>A custom domain name. Medium gets on my nerves and I wouldn’t want to inflict that on somebody else.</li>
  <li>Easy mechanism to design and publish posts, markdown being the optimal choice.</li>
  <li>A theme that was minimalistic but flexible.</li>
</ul>

<p>Initially I settled on <a href="https://hashnode.com/">Hashnode</a> which allowed easy setup, 1-click themes and a free custom domain name alias.</p>

<p>After setting it up it was swiftly apparent how bloated the platform was. I just wanted somewhere to write up interesting topics, not participate in some global developer community where we all pass-the-upvote and #followback.</p>

<p>With limited knowledge in the space I stumbled across Jekyll, an open source markdown-driven platform which generates static HTML from markdown files with an associated theme. Perfect!</p>

<p>I got my site set up locally, got the theme installed (took some time) and got the build working so that updates I published would actually generate into the HTML.</p>

<p>Next step: deployment.</p>

<p>I’m no guru with CI/CD. I can pick apart pre-assembled YAML files and make them work, or follow a wizard to generate the tasks behind the scenes. If there’s a bug, I bin the lot off and start again. I just needed to find a way to build and publish the site to some web server every time I pushed a new post to the repository the blog sat on. Should be easy enough.</p>

<h1 id="pragmatism">Pragmatism</h1>

<p>I settled on an Azure Static Web App. It offers a generous free tier with an automatic SSL certificate, free domain mapping and I could easily deploy my static content manually via Kudu. I wanted to automate this step because I’m a lazy bugger, so I gave it a shot.</p>

<p>Frankly I won’t waste your time at this stage with waffling on about my attempts to get various ruby scripts running, with artifacts being shoved around etc. There are guides out there if you’re interested - I couldn’t make heads nor tails of them.</p>

<p>Here’s what I knew worked:</p>

<ul>
  <li>Locally the blog compiled and looked fine once running with <code class="language-plaintext highlighter-rouge">bundle exec jeykll serve</code>.</li>
  <li>The <code class="language-plaintext highlighter-rouge">_site</code> directory compiled fully, taking new additions to the <code class="language-plaintext highlighter-rouge">all_collections/_posts</code> directory and building them into a HTML file.</li>
</ul>

<p>Now, cue the super scuffed approach to deploying this blog.</p>

<h1 id="rules-are-meant-to-be-completely-deleted-from-the-file">Rules are meant to be completely deleted from the file</h1>

<p>For this <em>pragmatic</em> guide we need to commit our first crime: remove the exclusion of <code class="language-plaintext highlighter-rouge">_site</code> from the <code class="language-plaintext highlighter-rouge">.gitignore</code>. How dreadful!</p>

<h1 id="forgive-me-microsoft-for-i-have-sinned">Forgive me Microsoft for I have sinned.</h1>

<p>Here’s the dreadful YAML file to use for publishing a single post. It’s not pretty, but it works. All in the name of getting it working without too much glitter:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>trigger:
  - master

pool:
  vmImage: ubuntu-latest

steps:
  - checkout: self
    submodules: true
  - task: AzureStaticWebApp@0
    inputs:
      app_location: '/_site'
      api_location: 'api'
      output_location: '/_site'
      azure_static_web_apps_api_token: $(deployment_token)

</code></pre></div></div>

<p>At the root of your Jeykll blog add a new file called <code class="language-plaintext highlighter-rouge">azure-pipeline.yml</code> and add the above as the contents.</p>

<p>Don’t worry about the <code class="language-plaintext highlighter-rouge">api_location: 'api'</code> section - it does nothing and frankly I’m scared to touch it.</p>

<h1 id="azure-devops---im-sorry">Azure Devops - I’m sorry.</h1>

<p><strong>As a heads up I had this blog under an old alias and let the domain expire (like a fool). I’ve migrated it to this domain, so the names look a little off!</strong></p>

<p>First, create the Azure Static Web App. Once it’s deployed, you should land on the dashboard for the resource:</p>

<p><img src="https://i.imgur.com/WNGBMuU.png" alt="Azure Devops - Static Web App With Jekyll" /></p>

<p>Here you can set up your custom domain if you like - the verification for the TXT DNS addition took 3 (!) days to fully detect in the portal. We’ll skip this step for now.</p>

<p>Whilst on Overview, find the <code class="language-plaintext highlighter-rouge">Manage Deployment Token</code> button on the right hand side.</p>

<p><img src="https://i.imgur.com/Mh4F6gs.png" alt="Azure Devops - Manage Deployment Token" /></p>

<p>Click the button (of course), copy the token or keep the blade open for the next step.</p>

<p>Go to your DevOps organisation -&gt; Project containing the blog repository -&gt; Pipelines.</p>

<p><strong>You won’t have the “Blog” pipeline there, don’t worry!</strong></p>

<p><img src="https://i.imgur.com/K71qLWI.png" alt="Azure Devops - New Pipeline for Jekyll Blog" /></p>

<p>Click on new pipeline to begin sinning like me</p>

<p><img src="https://i.imgur.com/W7X3oux.png" alt="Azure Devops - New Pipeline" /></p>

<p>Select the <code class="language-plaintext highlighter-rouge">Azure Repos Git</code> option, assuming that’s where your blog repository is stored.</p>

<p><img src="https://i.imgur.com/YklnYR7.png" alt="Azure Devops - VCS select" /></p>

<p>Select your repository</p>

<p><img src="https://i.imgur.com/xYX3uMb.png" alt="Azure devops - repo select" /></p>

<p>Now that you’ve saved our sinful pipeline <code class="language-plaintext highlighter-rouge">.yml</code> file, select <em>Existing Azure Pipelines YAML file</em></p>

<p><img src="https://i.imgur.com/RJPnFwo.png" alt="Azure Devops - Existing YAML file" /></p>

<p>Select the <code class="language-plaintext highlighter-rouge">azure-pipelines.yml</code> file from the root directory. For whatever reason Jekyll builds a copy to the <code class="language-plaintext highlighter-rouge">_site</code> directory, be sure <strong>not</strong> to use that one. Click <code class="language-plaintext highlighter-rouge">Continue</code> once you’re done.</p>

<p><img src="https://i.imgur.com/YSdGLO2.png" alt="Azure Devops - YML file select" /></p>

<p>Our <del>great</del> functional pipeline text will load in</p>

<p><img src="https://i.imgur.com/1GkALI3.png" alt="Azure Devops - Pipeline Review" /></p>

<p>Now’s the time to link the pipeline to our new, shiny Azure Static Web App. Click <code class="language-plaintext highlighter-rouge">Variables</code> in the top right</p>

<p><img src="https://i.imgur.com/7oKsEvr.png" alt="Azure Devops - Variables" /></p>

<p>Click <code class="language-plaintext highlighter-rouge">New Variable</code></p>

<p><img src="https://i.imgur.com/Ef6tOg9.png" alt="Azure Devops - New Variable" /></p>

<p>If you take a look at the bottom of our <code class="language-plaintext highlighter-rouge">azure-pipelines</code> file, we have a <code class="language-plaintext highlighter-rouge">$variable</code> called <code class="language-plaintext highlighter-rouge">deployment_token</code>. That’s the name of our variable. Make sure to add the token from our Static Web App blade from earlier to the <code class="language-plaintext highlighter-rouge">value</code> field:</p>

<p><img src="https://i.imgur.com/yY9rvt2.png" alt="Azure Devops - Variable Added" /></p>

<p>You can mark it as secret if you like, I haven’t because my partner can’t even find the monitor power button let alone understand Azure Pipelines.</p>

<p>You should see your new variable appear in the list, click save.</p>

<p><img src="https://i.imgur.com/z448xg4.png" alt="Azure Devops - Variable saved" /></p>

<p>Now save your pipeline by using the arrow on the <code class="language-plaintext highlighter-rouge">Run</code> button to show the hidden, very useful option</p>

<p><img src="https://i.imgur.com/APPyFYX.png" alt="i cant be bothered anymore" /></p>

<p>Awesome, your pipeline is set up. Now every time you push to <code class="language-plaintext highlighter-rouge">master</code>, the <code class="language-plaintext highlighter-rouge">_site</code> directory will deploy to your Azure Static Web App. <a href="https://www.youtube.com/watch?v=OUXvrWeQU0g">Please clap</a></p>

<h1 id="building-and-publishing-your-site">Building and publishing your site</h1>

<p>Now for the fun, extra scuffed section.</p>

<p>Every time a new blog post gets added, we need to build the blog. This converts the <code class="language-plaintext highlighter-rouge">.md</code> files containing our very important ramblings into readable <code class="language-plaintext highlighter-rouge">HTML</code> files. How exciting!</p>

<p>Now I’m lazy, if you couldn’t already tell. I can’t be bothered to write nice commits for things people will never see, so I wrote a <del>horrendous</del> functional script to speed this part up too.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll build | git add . | git commit -m "new post" | git pull | git push
</code></pre></div></div>

<p>Here we’re doing a few bits:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">bundle exec jekyll build</code> builds the <code class="language-plaintext highlighter-rouge">.md</code> files into <code class="language-plaintext highlighter-rouge">.html</code> files for the posts.</li>
  <li>Add all the new files to our repoitory.</li>
  <li>Commit them with a very descriptive commit message.</li>
  <li>Pull the latest changes in case we did a drunk ramble directly into DevOps (don’t judge me)</li>
  <li>Push the changes locally.</li>
</ul>

<p>I threw that crap into a <code class="language-plaintext highlighter-rouge">.ps1</code> PowerShell script and added it to the root of my blog.</p>

<p>Now, with the combined strength of our scuffed pipeline and horrendous git practices that my professors are definitely weeping at, we can write a new blog post and publish it with just a script. How far technology has come.</p>

<h1 id="after-thoughts">After thoughts</h1>

<p>I’m aware this is an awful way of ignoring learning proper CI/CD practices. I’ll live with myself. It works, nobody else is writing to this mess of a blog and I frankly don’t care about best practices for a micro-project.</p>

<p>Enjoy!</p>]]></content><author><name>James Gould</name><email>contact@jamesgould.dev</email></author><category term="jekyll" /><category term="azure devops" /><summary type="html"><![CDATA[Introduction]]></summary></entry></feed>